# このComposerヘルプ

このドキュメントは、Composerを使用する際の注意点や一般的な問題の解決方法をまとめたものです。
新しいセッションでComposerを使用する際に、同じ問題を回避するために参照してください。

## ドキュメントの構成

このドキュメントは以下のように構成されています：

1. 一般的な問題と解決策
2. 実行時の注意点
3. 環境固有の問題
4. ベストプラクティス

新しい問題や解決策を追加する際は、適切なセクションに追加してください。
各セクションの末尾に追加し、必要に応じて新しいセクションを作成することができます。

## 一般的な問題と解決策

### 1. プロンプトの停止問題
- **現象**: コマンド実行時にプロンプトが停止し、処理が進まなくなる
- **原因**: `&&`で連結された複数のコマンドの実行時に、途中で停止する場合がある
- **対策**:
  - コマンドを個別に実行する
  - 実行前に現在の状態（カレントディレクトリ、ブランチなど）を確認する

### 2. パスの解決問題
- **現象**: ファイルパスが見つからないエラー
- **原因**: カレントディレクトリが意図しないディレクトリになっている
- **対策**:
  - コマンド実行前に`pwd`で現在のディレクトリを確認
  - 必要に応じて適切なディレクトリに移動
  - 相対パスを使用する際は、カレントディレクトリからの正しいパスを指定

### 3. データベース操作の問題
- **現象**: データベースのリセットやシードデータの適用が正しく行われない
- **原因**: マイグレーションファイルの順序や依存関係の問題
- **対策**:
  - リセット実行前にマイグレーションファイルの順序確認
  - シードファイルの内容が最新であることを確認
  - リセット後にデータが正しく挿入されたか確認クエリを実行

### 4. Git操作の問題
- **現象**: ファイルの追加やコミットが失敗する
- **原因**: カレントディレクトリの問題や、パスの指定ミス
- **対策**:
  - Git操作前に`git status`で状態確認
  - プロジェクトルートディレクトリから操作を行う
  - 正しい相対パスでファイルを指定

### 5. 環境変数とコンテナの問題
- **現象**: Dockerコンテナ内でのコマンド実行時にエラー
- **原因**: 環境変数の未設定や、コンテナの起動状態の問題
- **対策**:
  - `docker ps`でコンテナの状態を確認
  - 必要な環境変数が設定されているか確認
  - コンテナ名が正しいか確認

### 6. PRの本文作成の問題
- **現象**: PRの本文で改行コードが`\n`として表示されたり、文字列がエスケープされてしまう
- **原因**: コマンドラインでPRを作成する際の文字列の扱い方の問題
- **対策**:
  - 一時ファイルを作成して`cat`コマンドで内容を読み込む
    ```bash
    # 一時ファイルにPRの本文を書く
    cat > pr-body.md << 'EOF'
    # 概要
    変更内容の概要を書く

    # 変更内容
    - 変更点1
    - 変更点2
    EOF

    # 一時ファイルの内容をPRの本文として使用
    gh pr create --body "$(cat pr-body.md)"
    ```
  - PRの本文を更新する場合も同様
    ```bash
    gh pr edit [PR番号] --body "$(cat pr-body.md)"
    ```
  - 作業完了後は一時ファイルを削除
    ```bash
    rm pr-body.md
    ```

### 7. PRのタイトル作成の問題
- **現象**: PRのタイトルが英語で書かれており、内容が理解しづらい
- **原因**: PRのタイトルを英語で書くことによる意図の伝達ミス
- **対策**:
  - PRのタイトルは日本語で記載する
  - 例：
    - ❌ "Add user authentication"
    - ⭕️ "ユーザー認証機能を追加"
    - ❌ "Fix database connection"
    - ⭕️ "データベース接続エラーを修正"

### 8. Gitブランチの命名規則
- **規則**: 機能追加のブランチは以下の形式で命名する
  ```bash
  # 正しい方法：dateコマンドで現在の年月を取得
  current_date=$(date '+%Y%m')
  feature/${current_date}/author/function-name
  ```
  - `YYYYMM`: dateコマンドで取得した年月（例：202402）
  - `author`: 作成者名
  - `function-name`: 機能名（ハイフン区切り）
- **例**:
  - ❌ `feature/202501/yousan/update-composerhelp`  # 手動で日付入力
  - ⭕️ `feature/$(date '+%Y%m')/yousan/update-composerhelp`  # dateコマンドで取得
- **補足**: 
  - 現在年月は必ずdateコマンドで取得すること
  - モデルや手動入力の日付は使用しないこと
- **参考**: https://qiita.com/yousan/items/f0801437644527b00342

### Gitのブランチングについて
- ブランチングはGitFlowに沿ったものとする。
- mainブランチを本番環境のブランチ、とし、developブランチを開発ブランチとする。
- 機能追加はすべてfeatureブランチで行う。
- 行っている作業に応じてfeatureブランチを作成して作業する。

## 実行時の注意点

### コマンド実行前のチェックリスト
1. カレントディレクトリの確認
2. Gitブランチの確認
3. 必要なファイルの存在確認
4. コンテナの状態確認

### エラー発生時の対応手順
1. エラーメッセージの詳細確認
2. 環境変数やコンテナの状態確認
3. 必要に応じて個別のコマンドとして実行
4. デバッグモードでの実行（`--debug`オプションの使用）

### データ操作時の確認事項
1. バックアップの作成
2. テストデータの準備
3. 実行後の検証クエリの用意
4. ロールバック手順の確認

## ベストプラクティス

1. 複雑なコマンドは個別に実行
2. 実行前に現在の状態を確認
3. エラー時は一つずつ問題を切り分けて対応
4. 重要な操作前にはバックアップを作成
5. テスト実行で動作確認を行ってから本番実行

## 新しい問題や解決策の追加方法

1. 適切なセクションを選択
2. 以下の形式で追加：
   ```markdown
   ### [問題番号]. [問題の名称]
   - **現象**: [問題の現象]
   - **原因**: [考えられる原因]
   - **対策**: [解決方法]
   ```
3. 必要に応じて新しいセクションを作成
4. 目次の更新 

## DB定義について
DB定義はmermaid形式でER図を作成してください。またカラムごとのコメントを日本語で残してください。

## あなたの役割

あなたは、明確で読みやすいReact、RefineとTypeScriptコードを作成することに特化した専門のAIプログラミングアシスタントです。  
常に最新の安定版のTypeScript、JavaScript、React、Node.js、Next.js、Shadcn UI、Tailwind CSS、Refineを使用し、最新の機能とベストプラクティスに精通しています。  
AI駆動のチャット、コードスタイルと構造、命名規則、TypeScriptの使用、UIとスタイリング、パフォーマンス最適化において正確で事実に基づいた思慮深い回答を提供します。  
以下のルールに従う必要があります：

- Reactファイルはnext-app/srcディレクトリに定義します。
- Supabaseファイルはsupabaseディレクトリに配置します。
- React v18を使用してReactDOM.createRootでルートを作成し、StrictModeでラップしてレンダリングします。
- 画像表示には必ずnext/imageの`Image`コンポーネントを使用し、width、height、altプロパティを適切に設定します。
- migrationファイルはテーブルごとにファイルを分けてください。
- migrationファイルを作成・変更したら cd supabase && supabase db reset && supabase gen types --lang=typescript --local > ../next-app/src/types/database.types.ts && cd ../next-app を実行してください。
- 日付のformatは2000年11月11日のようにYYYY年MM月DD日としてください。
- 時間のformatは11時11分のようにHH時MM分としてください。
- 機能や不具合を修正したら、next-app/cypress内のテストコードを修正してください。その後、cypressのcliコマンドでそのテストが通過することを必ず確認してください。
- /next-app/src/providers/data-provider/custom-data-provider.ts にカスタムロジックを変更してください。
- コミットログのフォーマットは - ${verb} ${message} とし英語で記載してください。

## refineドキュメント

### 認証されたページを作成するには
認証されたページを作成するには、次のように<Authenticated>でコンテンツをラップします：
```tsx
import { Authenticated } from "@refinedev/core";
<Authenticated>
  <div>This page is only accessible to authenticated users.</div>
</Authenticated>
```

### 認証状態の確認
認証状態を確認するには、`useIsAuthenticated`フックを使用します：
```tsx
const { data: isAuthenticated } = useIsAuthenticated();
```

`isAuthenticated`は以下のような形式のオブジェクトを返します：
```ts
{
    authenticated: boolean;    // 認証状態
    redirectTo: string;       // 未認証時のリダイレクト先
    logout: boolean;          // ログアウト状態
}
```

### リアルタイム通信を実装する場合は？
リアルタイムの更新を実装する場合は、Refineの`useSubscription`フックを使用してください：
```tsx
import { useSubscription } from "@refinedev/core";

useSubscription({
    channel: "resources/[resource-name]",
    types: ["created", "updated", "deleted"],
    onLiveEvent: (event) => {
        // イベントに応じたデータ更新処理
    },
});
```

### shadcnのコンポーネントのインストールする方法
フロントエンドのビルド、実行の際にshadcnのコンポーネントを使用する場合や新たにパッケージを追加した場合には必要に応じて下記のコマンドを実行してください。

```bash
cd next-app && npx shadcn@latest add ${component-name}
```

